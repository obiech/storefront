name: Run Tests for Every Pushs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

env:
  _TESTS_FILE: .dart_tool/test_files

jobs:
  build-dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Generate dropezy-ci Access Token
        uses: tibdex/github-app-token@v1.5.0
        id: generate_ci_token
        with:
          app_id: ${{ secrets.DROPEZY_CI_APP_ID }}
          private_key: ${{ secrets.DROPEZY_CI_PRIVATE_KEY }}

      - name: üìö Git Checkout
        uses: actions/checkout@v2

      - name: Configure Git to use dropezy-ci Access Token
        env:
          CI_TOKEN: ${{ steps.generate_ci_token.outputs.token }}
        run: |
          git config --global url."https://dropezy:${CI_TOKEN}@github.com".insteadOf "https://github.com"

      - name: Create '.env' File from Secret
        run: echo $SECRETS_FILE_CONTENTS | base64 -d > env/.env
        env:
          SECRETS_FILE_CONTENTS: ${{ secrets.ENV_BASE64 }}

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 2.10.4
          channel: stable
          cache: true
      
      # Cache flutter pubspec dependencies
      - name: Cache pubspec dependencies
        id: cache-pubspec-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PUB_CACHE }}
            **/.packages
            **/.flutter-plugins
            **/.flutter-plugin-dependencies
            **/.dart_tool/package_config.json
          key: ${{ runner.os }}-build-pubspec-${{ hashFiles('**/pubspec.lock') }}

      # Cache flutter build runner
      - name: Cache build runner
        id: cache-build-runner
        uses: actions/cache@v3
        with:
          path: |
            **/lib
            **/.dart_tool
            **/*.g.dart
            **/*.mocks.dart
            **/*.config.dart
          key: ${{ runner.os }}-build-runner-${{ github.run_number }}

      - name: Download pub dependencies
        if: steps.cache-pubspec-dependencies.outputs.cache-hit != 'true'
        run: flutter pub get

      - name: Build generated code
        if: steps.cache-build-runner.outputs.cache-hit != 'true'
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: ‚ú® Check Formatting
        run: flutter format --set-exit-if-changed lib test

      - name: üïµÔ∏è Analyze
        run: flutter analyze lib test

  test:
    runs-on: ubuntu-latest
    needs: build-dependencies
    strategy:
      fail-fast: false
      matrix:
        shard: [0, 1, 2, 3, 4, 5, 6]

    steps:
      - name: Generate dropezy-ci Access Token
        uses: tibdex/github-app-token@v1.5.0
        id: generate_ci_token
        with:
          app_id: ${{ secrets.DROPEZY_CI_APP_ID }}
          private_key: ${{ secrets.DROPEZY_CI_PRIVATE_KEY }}

      - name: üìö Git Checkout
        uses: actions/checkout@v2

      - name: Configure Git to use dropezy-ci Access Token
        env:
          CI_TOKEN: ${{ steps.generate_ci_token.outputs.token }}
        run: |
          git config --global url."https://dropezy:${CI_TOKEN}@github.com".insteadOf "https://github.com"

      - name: Create '.env' File from Secret
        run: echo $SECRETS_FILE_CONTENTS | base64 -d > env/.env
        env:
          SECRETS_FILE_CONTENTS: ${{ secrets.ENV_BASE64 }}

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 2.10.4
          channel: stable
          cache: true
      
      # Cache flutter pubspec dependencies
      - name: Cache pubspec dependencies
        id: cache-pubspec-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PUB_CACHE }}
            **/.packages
            **/.flutter-plugins
            **/.flutter-plugin-dependencies
            **/.dart_tool/package_config.json
          key: ${{ runner.os }}-build-pubspec-${{ hashFiles('**/pubspec.lock') }}

      # Cache flutter build runner
      - name: Cache build runner
        id: cache-build-runner
        uses: actions/cache@v3
        with:
          path: |
            **/lib
            **/.dart_tool
            **/*.g.dart
            **/*.mocks.dart
            **/*.config.dart
          key: ${{ runner.os }}-build-runner-${{ github.run_number }}

      # First, sort and fetch list of all test files into $_TESTS_FILE.
      #
      # Then, partitions the tests evenly for each shard, with each shard
      # running up to tests_per_shard tests.
      #
      # Each partition are stored a unique test file with this format: $_TESTS_FILE<shard_number>
      # i.e.  .dart_tool/test_files.0, .dart_tool/test_files.1, and so on. 
      - name: Determine tests for individual shards
        run: |
          find test -name "*_test\\.dart" | sort > $_TESTS_FILE
          (( tests_per_shard = ($(wc -l <$_TESTS_FILE) + 7 - 1) / 7 ))
          (( offset = 1 + tests_per_shard * ${{ matrix.shard }} ))
          tail -n+$offset $_TESTS_FILE | head -n$tests_per_shard > $_TESTS_FILE.${{ matrix.shard }}
          echo 'TEST FILES SELECTED:'
          cat "$_TESTS_FILE.${{ matrix.shard }}"
        shell: bash

      # Runs tests exclusively on files predetermined in previous step
      - name: üß™ Run Tests
        run: flutter test --no-pub --coverage --test-randomize-ordering-seed random $(cat $_TESTS_FILE.${{ matrix.shard }})
        shell: bash
